Pros and cons about react hook / class

##Cons:

# Dependencies in useCallback
As we know, there are clear and limited area to be rerendered in React class, which is inside render function.  While in react function component, rerender will run throughout the whole function.
To avoid the unnecessary function rerendering, we may use useCallback hook to cache the function, but we still need to pass the dependencies, even including some other functions.
e.g.

const myFunc = useCallback(() => {
      c(a, b);
}, [a, b, c]);

This contains an ugly and annoying tail, besides, people are easy to make mistakes when editing it. While in React class component, we do not need to worry about the dependencies since the functions will not be rerendered.


# Synchronisation 
// todo

# State and rerender
In React hooks, states works individually, while in React class, state can be assigned in one object or function, which is much more flexible. The difference the time of rerendering.
e.g. If you need to set two varibles: age and gender
In hooks, it rerender two times:
setAge(myAge);
setGender(myGender); 
while in class, it rerender only one time:
this.setState({ age, gender });

In hooks, wee may consider combine these two states into one object,
e.g.
const [info, setInfo] = useState({ age: myAge, gender: myGender });
It is still not flexible or convenient as setState, although we can combine them in some way.

# Return result
// todo

# Decorator 
// todo

# Readable 
// todo

# Unstable reference
The functions inside a function component will be rerendered every time if there were no useCallback/useRef wrapped, resulting unstable reference of this function. This will be a problem when we do need a stable reference, such as in debounce, throttle and Pub & Sub, a deadly disfunction will happen.
To solve this, we may need to wrap them with some extra works, including useRef/useCallback. Eg. lodash/useThrottle. That works but disgusting. 

# Stale State


## Pros

# Abstract: Combine VS Inherit
Think about how we make abstract component in react, there are some samples.

1. Inherit: Wrapping component (Both Class & Hooks Works)

2. Inherit: Passing params to children (Both Class & Hooks Works)

3. Inherit: Decorator (Class Only)

4. Combine: custom hooks (Hooks Only)








